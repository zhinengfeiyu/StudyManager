package com.caiyu.dao;

/**
 * Created by Ê∏ù on 2016/2/20.
 */

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.caiyu.entity.TeacherEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table note.
 */
public class TeacherDao extends AbstractDao<TeacherEntity, Long> {

    public static final String TABLENAME = "teacher";

    /**
     * Properties of entity TeacherEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Academy = new Property(4, String.class, "academy", false, "ACADEMY");
        public final static Property Position = new Property(5, String.class, "position", false, "POSITION");
    };


    public TeacherDao(DaoConfig config) {
        super(config);
    }

    public TeacherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'teacher' (" + //
                "'ID' INTEGER PRIMARY KEY," + // 0: id
                "'NAME' TEXT," + // 1: content
                "'SEX' TEXT," + // 2: sex
                "'PHONE' TEXT," + // 3: phone
                "'ACADEMY' TEXT," + // 4: academy
                "'POSITION' TEXT);"); // 5: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'teacher'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TeacherEntity entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }

        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }

        String academy = entity.getAcademy();
        if (academy != null) {
            stmt.bindString(5, academy);
        }

        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(6, position);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public TeacherEntity readEntity(Cursor cursor, int offset) {
        TeacherEntity entity = new TeacherEntity(
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), //academy
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5)  //position
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TeacherEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAcademy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPosition(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TeacherEntity entity, long rowId) {
        return entity.getId();
    }

    /** @inheritdoc */
    @Override
    public Long getKey(TeacherEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}

