package com.caiyu.dao;

/**
 * Created by Ê∏ù on 2016/1/30.
 */
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.caiyu.entity.ClassTableEntity;
import com.caiyu.entity.ClassTimeEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

/**
 * DAO for table class_table.
 */
public class ClassTimeDao extends AbstractDao<ClassTimeEntity, Long> {

    public static final String TABLENAME = "class_time";

    /**
     * Properties of entity ClassTableEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Order = new Property(0, Long.class, "order", true, "ORDER");
        public final static Property Start_hour = new Property(1, Integer.class, "start_hour", false, "START_HOUR");
        public final static Property Start_minute = new Property(2, Integer.class, "start_minute", false, "START_MINUTE");
        public final static Property End_hour = new Property(3, Integer.class, "end_hour", false, "END_HOUR");
        public final static Property End_minute = new Property(4, Integer.class, "end_minute", false, "END_MINUTE");
    };


    public ClassTimeDao(DaoConfig config) {
        super(config);
    }

    public ClassTimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'class_time' (" + //
                "'ORDER' INTEGER," + // 0: order
                "'START_HOUR' INTEGER," + // 2: start_hour
                "'START_MINUTE' INTEGER," + // 3: start_minute
                "'END_HOUR' INTEGER," + // 4: end_hour
                "'END_MINUTE' INTEGER);"); // 5: end_minute
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'class_time'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClassTimeEntity entity) {
        stmt.clearBindings();

        Long order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(1, order);
        }

        Integer startHour = entity.getStartHour();
        if (startHour != null) {
            stmt.bindLong(2, startHour);
        }

        Integer startMinute = entity.getStartMinute();
        if (startMinute != null) {
            stmt.bindLong(3, startMinute);
        }

        Integer endHour = entity.getEndHour();
        if (endHour != null) {
            stmt.bindLong(4, endHour);
        }

        Integer endMinute = entity.getEndMinute();
        if (endMinute != null) {
            stmt.bindLong(5, endMinute);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ClassTimeEntity readEntity(Cursor cursor, int offset) {
        ClassTimeEntity entity = new ClassTimeEntity(
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // order
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // start_hour
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // start_minute
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // end_hour
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // end_minute
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClassTimeEntity entity, int offset) {
        entity.setOrder(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartHour(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStartMinute(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEndHour(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setEndMinute(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ClassTimeEntity entity, long rowId) {
        return entity.getOrder();
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ClassTimeEntity entity) {
        if(entity != null) {
            return entity.getOrder();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
