package com.caiyu.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.caiyu.entity.ClassTableEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table class_table.
*/
public class ClassTableDao extends AbstractDao<ClassTableEntity, Long> {

    public static final String TABLENAME = "class_table";

    /**
     * Properties of entity ClassTableEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Day_of_week = new Property(1, Integer.class, "day_of_week", false, "DAY_OF_WEEK");
        public final static Property Order_of_day = new Property(2, Integer.class, "order_of_day", false, "ORDER_OF_DAY");
        public final static Property Class_name = new Property(3, String.class, "class_name", false, "CLASS_NAME");
        public final static Property Class_room = new Property(4, String.class, "class_room", false, "CLASS_ROOM");
        public final static Property Teacher = new Property(5, String.class, "teacher", false, "TEACHER");
        public final static Property Start_week = new Property(6, Integer.class, "start_week", false, "START_WEEK");
        public final static Property End_week = new Property(7, Integer.class, "end_week", false, "END_WEEK");
    };


    public ClassTableDao(DaoConfig config) {
        super(config);
    }
    
    public ClassTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'class_table' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'DAY_OF_WEEK' INTEGER," + // 1: day_of_week
                "'ORDER_OF_DAY' INTEGER," + // 2: order_of_day
                "'CLASS_NAME' TEXT," + // 3: class_name
                "'CLASS_ROOM' TEXT," + // 4: class_room
                "'TEACHER' TEXT," + // 5: teacher
                "'START_WEEK' INTEGER," + // 6: start_week
                "'END_WEEK' INTEGER);"); // 7: end_week
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'class_table'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClassTableEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer day_of_week = entity.getDayOfWeek();
        if (day_of_week != null) {
            stmt.bindLong(2, day_of_week);
        }
 
        Integer order_of_day = entity.getOrderOfDay();
        if (order_of_day != null) {
            stmt.bindLong(3, order_of_day);
        }
 
        String class_name = entity.getClassName();
        if (class_name != null) {
            stmt.bindString(4, class_name);
        }
 
        String class_room = entity.getClassRoom();
        if (class_room != null) {
            stmt.bindString(5, class_room);
        }
 
        String teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindString(6, teacher);
        }
 
        Integer start_week = entity.getStartWeek();
        if (start_week != null) {
            stmt.bindLong(7, start_week);
        }
 
        Integer end_week = entity.getEndWeek();
        if (end_week != null) {
            stmt.bindLong(8, end_week);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ClassTableEntity readEntity(Cursor cursor, int offset) {
        ClassTableEntity entity = new ClassTableEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // day_of_week
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // order_of_day
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // class_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // class_room
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // teacher
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // start_week
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // end_week
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClassTableEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDayOfWeek(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setOrderOfDay(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setClassName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClassRoom(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTeacher(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStartWeek(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setEndWeek(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ClassTableEntity entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ClassTableEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
