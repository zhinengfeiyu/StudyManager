package com.caiyu.dao;

/**
 * Created by Ê∏ù on 2016/2/20.
 */

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.caiyu.entity.NoteEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table note.
 */
public class NoteDao extends AbstractDao<NoteEntity, Long> {

    public static final String TABLENAME = "note";

    /**
     * Properties of entity NoteEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property Subject_id = new Property(2, Long.class, "subject_id", false, "SUBJECT_ID");
        public final static Property Last_edit_time = new Property(3, Long.class, "last_edit_time", false, "LAST_EDIT_TIME");
    };


    public NoteDao(DaoConfig config) {
        super(config);
    }

    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'note' (" + //
                "'ID' INTEGER PRIMARY KEY," + // 0: id
                "'CONTENT' TEXT," + // 1: content
                "'SUBJECT_ID' INTEGER," + // 2: subject_id
                "'LAST_EDIT_TIME' INTEGER);"); // 3: last_edit_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'note'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NoteEntity entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }

        Long subject_id = entity.getSubjectId();
        if (subject_id != null) {
            stmt.bindLong(3, subject_id);
        }

        Long last_edit_time = entity.getLastEditTime();
        if (last_edit_time != null) {
            stmt.bindLong(4, last_edit_time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public NoteEntity readEntity(Cursor cursor, int offset) {
        NoteEntity entity = new NoteEntity(
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // subject_id
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // last_edit_time
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NoteEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSubjectId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLastEditTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NoteEntity entity, long rowId) {
        return entity.getId();
    }

    /** @inheritdoc */
    @Override
    public Long getKey(NoteEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}

